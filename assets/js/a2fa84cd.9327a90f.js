"use strict";(self.webpackChunkuimotelndefined=self.webpackChunkuimotelndefined||[]).push([[2516],{92:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"pbx/advance-settings/call_record_storage","title":"Call Recording in Storage","description":"To transfer recorded audio files of calls to a separate storage space (NAS), two sections need to be configured:","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/pbx/4-advance-settings/7-call_record_storage.md","sourceDirName":"pbx/4-advance-settings","slug":"/pbx/advance-settings/call_record_storage","permalink":"/pbx/advance-settings/call_record_storage","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"Docs","previous":{"title":"Introduction to Matching Patterns","permalink":"/pbx/advance-settings/matchpattern"}}');var r=t(4848),i=t(8453);const s={title:void 0},a="Call Recording in Storage",l={},c=[{value:"1. Mounting Storage and Server Configuration",id:"1-mounting-storage-and-server-configuration",level:3},{value:"2. Configuring the global.php File",id:"2-configuring-the-globalphp-file",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"call-recording-in-storage",children:"Call Recording in Storage"})}),"\n",(0,r.jsx)(n.p,{children:"To transfer recorded audio files of calls to a separate storage space (NAS), two sections need to be configured:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Mounting the storage and configuring the server for data storage in the mounted path."}),"\n",(0,r.jsxs)(n.li,{children:["Configuring the ",(0,r.jsx)(n.code,{children:"global.php"})," file to display recorded calls in the Simotel web interface."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"1-mounting-storage-and-server-configuration",children:"1. Mounting Storage and Server Configuration"}),"\n",(0,r.jsx)(n.p,{children:"First, use the following command to mount the storage network to your server:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"mount -t cifs --options user=test,password=test.456 //172.18.XX.XXX/Zabt /mnt/Zabt\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"user"}),": Username for the storage space."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"password"}),": Password for the storage space."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"//172.18.XX.XXX/Zabt"}),": Address and path for recording calls."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"/mnt/Zabt"}),": The local path where the storage will be mounted."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In the second step, use the following Python script to transfer the calls to the storage space:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"#author = Morteza Iravani\n#email = irmorteza@hotmail.com\n#create date = 9/17/2017\nimport shutil\nimport os\nfrom conf.config import Config\nConfig.log_file_name_simotel = 'simotelfilemover.log'\nfrom logger import logger\nfrom concurrent.futures import ThreadPoolExecutor\nfrom _version import __version__, __edition__\nimport time\n\nsrc = '/var/spool/asterisk/monitor_converted/'\ndst = '/mnt/Zabt/asterisk_monitor/'\n\ndef move_files():\n    try:\n        for path, subdirs, files in os.walk(src):\n            for name in files:\n                file_path = os.path.join(path, name)\n                new_path = None\n                directory = None\n                if '_' in name:\n                    sub_directory, _, __ = name.partition('_')\n                    directory = '%s%s' % (dst, sub_directory)\n                    new_path = '%s/%s' % (directory, name)\n                else:\n                    new_path = '%s%s' % (dst, name)\n\n                if directory and not os.path.exists(directory):\n                    os.makedirs(directory)\n                if new_path:\n                    logger.debug('move file from %s to %s' % (file_path, new_path))\n                    shutil.move(file_path, new_path)\n\n        for path, subdirs, files in os.walk(src):\n            import datetime\n            today = datetime.datetime.now().strftime('%Y%m%d')\n            for d in subdirs:\n                path2 = os.path.join(path, d)\n                if d < today and len(os.listdir(path2)) == 0:\n                    os.rmdir(path2)\n    except Exception as e:\n        logger.exception(e)\n\ndef worker():\n    while True:\n        try:\n            logger.debug('run mover to move files')\n            move_files()\n        except Exception as e:\n            logger.exception()\n        time.sleep(10)\n\nif __name__ == '__main__':\n    logger.info('file mover version: %s.%s' % (__version__, __edition__))\n\n    executor = ThreadPoolExecutor(max_workers=100)\n    future = executor.submit(worker)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Please note that the value of the variable ",(0,r.jsx)(n.code,{children:"dst"})," in the script above specifies the storage path, and it should be set according to the mount path of the storage."]}),"\n",(0,r.jsxs)(n.p,{children:["Finally, create the ",(0,r.jsx)(n.code,{children:"monitor_files_mover.py"})," (the above Python script) in the ",(0,r.jsx)(n.code,{children:"/usr/src/simotel-file-mover/"})," directory and run the script using the following command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"python3.4 /usr/src/simotel-file-mover/monitor_files_mover.py &\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,r.jsx)(n.p,{children:"Use the Linux screen feature to run the above script so that the program runs automatically in the background."})}),"\n",(0,r.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,r.jsxs)(n.p,{children:["It is recommended to register the above command in the ",(0,r.jsx)(n.code,{children:"rc.local"})," file so that the program runs automatically in the background after rebooting."]})}),"\n",(0,r.jsx)(n.h3,{id:"2-configuring-the-globalphp-file",children:"2. Configuring the global.php File"}),"\n",(0,r.jsxs)(n.p,{children:["Edit the ",(0,r.jsx)(n.code,{children:"global.php"})," file located at ",(0,r.jsx)(n.code,{children:"/var/www/html/global.php"})," to change the value of ",(0,r.jsx)(n.code,{children:'"call_record_directory"'})," so that recorded calls can also be visible in the web interface."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:'"pbx"=> array(\n                "call_record_directory"=> "/mnt/Zabt/asterisk_monitor/",  // This value should be changed to the new path\n                "voicemail_directory"=> "/var/spool/asterisk/voicemail/simotel-voicemail/",\n                "voicemailv2_directory"=> "/var/spool/asterisk/voicemailv2/"\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Warning",type:"caution",children:(0,r.jsx)(n.p,{children:"Be aware that changes made may be lost with system updates, so be sure to back up your settings manually before updating."})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);